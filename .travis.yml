group: edge
dist: focal
virt: vm
os: linux

arch:
  - amd64

services:
  - docker

language: shell

env:
  - DIR=chrome-stable REPO=yukinying/chrome-headless-browser-stable TARGET=Chromium
  - DIR=chrome REPO=yukinying/chrome-headless-browser TARGET=Chrome
#  - DIR=chrome-xl REPO=yukinying/chrome-headless-browser-xl TARGET=Chrome
#  - DIR=chromedriver REPO=yukinying/chrome-headless-browser-selenium TARGET=Chrome

jobs:
  include:
  - arch: arm64-graviton2
    env: DIR=chrome-stable REPO=yukinying/chrome-headless-browser-stable TARGET=Chromium

before_install:
  - export ARCH=${TRAVIS_CPU_ARCH/-graviton2/} # remove unnecessary architecture annotation.
  - export VERSION0=`docker run --name chrome --rm --entrypoint=/usr/bin/google-chrome $REPO --version | grep -Po "(?<=$TARGET )[^ ]+"`
  - export VERSION0=${VERSION0:-NONE}
  - wget https://dl.google.com/linux/direct/google-chrome-unstable_current_amd64.deb
  - echo "$DOCKER_PASSWORD" | docker login -u "$DOCKER_USERNAME" --password-stdin
  - docker build -t $REPO $DIR

script:
  - export VERSION1=`docker run --name chrome --rm --entrypoint=/usr/bin/google-chrome $REPO --version | grep -Po "(?<=$TARGET )[^ ]+"`
  - docker tag $REPO $REPO:latest
  - docker tag $REPO $REPO:$VERSION1
  - docker tag $REPO $REPO-$ARCH:latest
  - docker tag $REPO $REPO-$ARCH:$VERSION1
  - docker run --init -it --rm --name chrome --cap-add=SYS_ADMIN --entrypoint=/usr/bin/google-chrome $REPO:latest   --headless --disable-dev-shm-usage --disable-gpu --dump-dom http://info.cern.ch/hypertext/WWW/TheProject.html
  - test -x $DIR/tests/test.sh && cd $DIR/tests && ./test.sh && cd ../..

after_success:
  # Google chrome only have one architecture pre-built.
  - if [ "$TRAVIS_BRANCH" == "master" ] && [ "$VERSION0" != "$VERSION1" ] && [ "$TARGET" == "Chrome" ]; then
    docker push $REPO:latest;
    docker push $REPO:$VERSION1;
    fi
  # Chromium has multiple architecture pre-built.
  - if [ "$TRAVIS_BRANCH" == "stable" ] && [ "$VERSION0" != "$VERSION1" ] && [ "$TARGET" == "Chromium" ]; then
    docker push $REPO-$ARCH:latest;
    docker push $REPO-$ARCH:$VERSION1;
    fi 
  # Create manifest in the end
  - export DOCKER_CLI_EXPERIMENTAL=enabled
  - if [ "$TRAVIS_BRANCH" == "stable" ] && [ "$VERSION0" != "$VERSION1" ] && [ "$TARGET" == "Chromium" ] && [ "$ARCH" == "arm64" ]; then
    docker manifest create   $REPO:latest $REPO-amd64:latest $REPO-arm64:latest;
    docker manifest annotate $REPO:latest $REPO-amd64:latest --arch amd64;
    docker manifest annotate $REPO:latest $REPO-arm64:latest --arch arm64;
    docker manifest push     $REPO:latest;
    docker manifest create   $REPO:$VERSION1 $REPO-amd64:$VERSION1 $REPO-arm64:$VERSION1;
    docker manifest annotate $REPO:$VERSION1 $REPO-amd64:$VERSION1 --arch amd64;
    docker manifest annotate $REPO:$VERSION1 $REPO-arm64:$VERSION1 --arch arm64;
    docker manifest push     $REPO:$VERSION1;
    fi
